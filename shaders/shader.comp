#version 450
#extension GL_ARB_separate_shader_objects : enable

#define WORKGROUP_SIZE 32
layout (local_size_x = WORKGROUP_SIZE, local_size_y = WORKGROUP_SIZE, local_size_z = 1 ) in;

layout(std430, binding = 0) buffer outputBuffer
{
	uint imageData[];
};

struct SphereData {
	vec3 position;
	float radius;
};

struct CameraData {
	vec3 position;
	float focusDistance;
	float ratio;
	vec3 lowerLeftCorner;
	vec3 horizontal;
	vec3 vertical;
};

struct SceneData {
	int numSpheres;
	int width;
	int height;
	CameraData camData;
	SphereData sphereData[100];
};

layout(std430, binding = 1) buffer inputBuffer
{
	SceneData sceneData;
};

void writeColor(vec3 color){
	imageData[sceneData.width * gl_GlobalInvocationID.y + gl_GlobalInvocationID.x] = packUnorm4x8(vec4(color, 1.0));
}





void main() {
	if(gl_GlobalInvocationID.x >= sceneData.width || gl_GlobalInvocationID.y >= sceneData.height)
	return;

	float x = float(gl_GlobalInvocationID.x) / float(sceneData.width);
	float y = float(gl_GlobalInvocationID.y) / float(sceneData.height);

	writeColor(vec3(1.0, 0.0, 0.0));
}